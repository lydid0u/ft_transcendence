//  function handleCredentialResponse(response) {
//             console.log("üéâ Google vient de m'envoyer ceci:", response);
//             const userInfo = parseJwt(response.credential);
//             console.log("üë§ Informations utilisateur d√©cod√©es:", userInfo);
            
//             /*
//             üíæ SAUVEGARDE DANS LOCALSTORAGE
            
//             Ici, je vais sauvegarder les infos utilisateur dans le localStorage.
//             C'est comme mettre les donn√©es dans un coffre-fort du navigateur
//             qui survit aux rechargements de page.
            
//             localStorage.setItem(cl√©, valeur) = "Sauvegarde cette valeur avec ce nom"
//             JSON.stringify() = transforme un objet JavaScript en texte
//             (localStorage ne peut stocker que du texte, pas des objets)
//             */
//             localStorage.setItem('googleUserInfo', JSON.stringify(userInfo));
//             localStorage.setItem('isLoggedIn', 'true');
//             console.log("üíæ Donn√©es sauvegard√©es dans localStorage");
            
//             // Maintenant j'affiche les informations (j'utilise une fonction s√©par√©e)
//             displayUserInfo(userInfo);
//         }

//         /*
//         üñºÔ∏è FONCTION D'AFFICHAGE: displayUserInfo
        
//         J'ai s√©par√© l'affichage dans sa propre fonction car elle sera utilis√©e
//         √† deux endroits:
//         1. Apr√®s connexion Google (donn√©es fra√Æches)
//         2. Au chargement de page (donn√©es du localStorage)
        
//         C'est un principe important en programmation: si tu fais la m√™me chose
//         √† plusieurs endroits, cr√©e une fonction !
//         */
//         function displayUserInfo(userInfo) {
//             console.log("üñºÔ∏è Affichage des informations utilisateur:", userInfo);
            
//             /*
//             üìù REMPLISSAGE DES √âL√âMENTS HTML
            
//             document.getElementById = "Va chercher l'√©l√©ment HTML avec cet ID"
//             .textContent = "Change le texte √† l'int√©rieur"
//             .src = "Change l'attribut src (pour les images)"
            
//             L'op√©rateur || signifie "ou alors". Si userInfo.name est vide,
//             utilise "Nom non disponible" √† la place.
//             */
//             document.getElementById('user-name').textContent = userInfo.name || "Nom non disponible";
//             document.getElementById('user-email').textContent = userInfo.email || "Email non disponible";
//             document.getElementById('user-id').textContent = userInfo.sub || "ID non disponible";
            
//             // Pour la photo de profil, on v√©rifie qu'elle existe avant de l'afficher
//             if (userInfo.picture) {
//                 document.getElementById('user-picture').src = userInfo.picture;
//             }
            
//             /*
//             üëÅÔ∏è GESTION DE L'AFFICHAGE
            
//             Maintenant je dois:
//             1. Cacher le bouton de connexion (plus besoin, il est connect√©!)
//             2. Montrer les infos utilisateur
//             */
            
//             // Je cache le bouton Google
//             document.getElementById('g_id_onload').style.display = 'none';
            
//             // J'affiche les infos utilisateur
//             document.getElementById('user-info').style.display = 'block';
//         }

//         /*
//         üîì FONCTION DE D√âCODAGE JWT: parseJwt
        
//         Cette fonction prend un token JWT encod√© et le transforme en objet JavaScript lisible.
//         C'est comme avoir un d√©codeur secret pour lire un message chiffr√©.
        
//         Pourquoi c'est compliqu√©? Parce que Google encode les donn√©es en "Base64" 
//         pour la s√©curit√© et pour qu'elles passent bien sur internet.
//         */
//         function parseJwt(token) {
//             console.log("üîç Token JWT brut re√ßu:", token);
            
//             /*
//             ‚úÇÔ∏è D√âCOUPAGE DU TOKEN
//             Un JWT a 3 parties s√©par√©es par des points: "header.payload.signature"
//             split('.') = d√©coupe le texte √† chaque point
//             [1] = prend la 2√®me partie (l'index 1, car on compte √† partir de 0)
//             */
//             const base64Url = token.split('.')[1];
//             console.log("üì¶ Partie payload extraite:", base64Url);
            
//             /*
//             üîÑ CONVERSION BASE64URL ‚Üí BASE64
//             Google utilise "Base64URL" (variante de Base64) qui remplace:
//             - les tirets (-) par des plus (+)
//             - les underscores (_) par des slashes (/)
            
//             C'est comme convertir un dialecte vers la langue standard.
//             */
//             const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
//             console.log("üîÑ Converti en Base64 standard:", base64);
            
//             /*
//             üìñ D√âCODAGE BASE64
//             atob() = fonction du navigateur qui d√©code le Base64
//             Mais le r√©sultat peut contenir des caract√®res sp√©ciaux, 
//             donc on les encode proprement avec decodeURIComponent
            
//             Cette partie est technique, retiens juste que √ßa transforme 
//             du charabia en texte JSON lisible.
//             */
//             const jsonPayload = decodeURIComponent(
//                 atob(base64)
//                     .split('')
//                     .map(function(c) {
//                         return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
//                     })
//                     .join('')
//             );
//             console.log("üìù JSON d√©cod√©:", jsonPayload);
            
//             /*
//             üéØ TRANSFORMATION EN OBJET JAVASCRIPT
//             JSON.parse() transforme le texte JSON en vrai objet JavaScript
//             qu'on peut utiliser facilement avec user.name, user.email, etc.
//             */
//             const userObject = JSON.parse(jsonPayload);
//             console.log("‚úÖ Objet utilisateur final:", userObject);
            
//             return userObject;
//         }

//         /*
//         üö™ FONCTION DE D√âCONNEXION
        
//         Cette fonction nettoie tout quand l'utilisateur veut se d√©connecter.
//         Elle remet la page dans son √©tat initial ET supprime les donn√©es sauvegard√©es.
//         */
//         function signOut() {
//             console.log("üëã D√©connexion en cours...");
            
//             /*
//             üóëÔ∏è NETTOYAGE DU LOCALSTORAGE
            
//             localStorage.removeItem() = "Supprime cette donn√©e sauvegard√©e"
//             C'est crucial de nettoyer, sinon l'utilisateur resterait connect√©
//             m√™me apr√®s d√©connexion !
//             */
//             localStorage.removeItem('googleUserInfo');
//             localStorage.removeItem('isLoggedIn');
//             console.log("üóëÔ∏è Donn√©es supprim√©es du localStorage");
            
//             /*
//             üßπ NETTOYAGE DE L'INTERFACE
//             On fait l'inverse de la connexion:
//             1. Cacher les infos utilisateur
//             2. R√©afficher le bouton Google
//             */
//             document.getElementById('user-info').style.display = 'none';
//             document.getElementById('g_id_onload').style.display = 'block';
            
//             /*
//             ‚ú® PAS BESOIN DE RECHARGER !
            
//             Avant, on rechargeait la page avec location.reload().
//             Maintenant qu'on g√®re la persistance proprement, 
//             on peut juste changer l'affichage sans recharger.
//             C'est plus fluide pour l'utilisateur !
//             */
//             console.log("‚úÖ D√©connexion termin√©e");
//         }

//         /*
//         üîÑ FONCTION DE V√âRIFICATION AU CHARGEMENT: checkExistingLogin
        
//         Cette fonction est appel√©e quand la page se charge.
//         Elle v√©rifie s'il y a d√©j√† des donn√©es de connexion sauvegard√©es.
        
//         C'est comme v√©rifier s'il y a d√©j√† un ticket de caisse dans ta poche
//         quand tu entres dans un magasin.
//         */
//         function checkExistingLogin() {
//             console.log("üîç V√©rification d'une session existante...");
            
//             /*
//             üìñ LECTURE DU LOCALSTORAGE
            
//             localStorage.getItem() = "Donne-moi la valeur sauvegard√©e avec ce nom"
//             Si rien n'est sauvegard√©, √ßa renvoie null (rien).
//             */
//             const isLoggedIn = localStorage.getItem('isLoggedIn');
//             const savedUserInfo = localStorage.getItem('googleUserInfo');
            
//             console.log("üìñ Statut de connexion sauvegard√©:", isLoggedIn);
//             console.log("üìñ Donn√©es utilisateur sauvegard√©es:", savedUserInfo);
            
//             /*
//             ‚úÖ V√âRIFICATION ET RESTAURATION
            
//             Je v√©rifie deux choses:
//             1. Est-ce que l'utilisateur √©tait connect√© ? (isLoggedIn === 'true')
//             2. Est-ce que j'ai ses informations ? (savedUserInfo existe)
            
//             L'op√©rateur && signifie "ET". Les deux conditions doivent √™tre vraies.
//             */
//             if (isLoggedIn === 'true' && savedUserInfo) {
//                 /*
//                 üîÑ TRANSFORMATION TEXTE ‚Üí OBJET
                
//                 JSON.parse() fait l'inverse de JSON.stringify():
//                 Il transforme du texte JSON en objet JavaScript utilisable.
                
//                 Rappel: localStorage ne stocke que du texte, donc on doit
//                 reconvertir en objet pour l'utiliser.
//                 */
//                 const userInfo = JSON.parse(savedUserInfo);
//                 console.log("üîÑ Restauration de la session:", userInfo);
                
//                 // J'affiche les infos comme si l'utilisateur venait de se connecter
//                 displayUserInfo(userInfo);
//             } else {
//                 console.log("‚ùå Aucune session trouv√©e, affichage du bouton de connexion");
//                 // L'utilisateur n'√©tait pas connect√©, on montre le bouton Google
//                 document.getElementById('g_id_onload').style.display = 'block';
//                 document.getElementById('user-info').style.display = 'none';
//             }
//         }

//         /*
//         üöÄ √âV√âNEMENT DE CHARGEMENT DE PAGE  
//         window.addEventListener('load', ...) dit au navigateur:
//         "Quand la page est compl√®tement charg√©e, ex√©cute cette fonction"
        
//         C'est crucial car si on essaie de lire le localStorage avant que
//         la page soit charg√©e, les √©l√©ments HTML n'existent pas encore !
//         */
//         window.addEventListener('load', function() {
//             console.log("üöÄ Page compl√®tement charg√©e, v√©rification de la session...");
//             checkExistingLogin();
//         });
